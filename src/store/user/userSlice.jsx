import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchLoggedInDoctor,
  fetchLoggedInUser,
  updateDoctor,
  updateUser,
} from "./userAPI";
import { useSelector } from "react-redux";

const initialState = {
  loading: false,
  userInfo: null, // this info will be used in case of detailed user info, while auth will only be used for loggedInUser id etc. checks
};

export const fetchLoggedInUserAsync = createAsyncThunk(
  "user/fetchLoggedInUser",
  async () => {
    console.log("fetching user...");
    const response = await fetchLoggedInUser();
    // The value we return becomes the `fulfilled` action payload
    console.log(response);
    return response;
  }
);

export const fetchLoggedInDoctorAsync = createAsyncThunk(
  "user/fetchLoggedInUserDoctor",
  async () => {
    console.log("fetching doctor...");
    const response = await fetchLoggedInDoctor();
    // The value we return becomes the `fulfilled` action payload
    // console.log(response);
    return response;
  }
);

export const updateUserAsync = createAsyncThunk(
  "user/updateUser",
  async (update) => {
    const response = await updateUser(update);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const updateDoctorAsync = createAsyncThunk(
  "user/updateDoctor",
  async (update) => {
    const response = await updateDoctor(update);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const userSlice = createSlice({
  name: "user",
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(updateUserAsync.pending, (state) => {
        state.loading = true;
      })
      .addCase(updateUserAsync.fulfilled, (state, action) => {
        state.loading = false;
        state.userInfo = action.payload;
      })
      .addCase(fetchLoggedInUserAsync.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchLoggedInUserAsync.fulfilled, (state, action) => {
        state.userInfo = action.payload;
        state.loading = false;
      })
      .addCase(updateDoctorAsync.pending, (state) => {
        state.loading = true;
      })
      .addCase(updateDoctorAsync.fulfilled, (state, action) => {
        state.loading = false;
        state.userInfo = action.payload;
      })
      .addCase(fetchLoggedInDoctorAsync.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchLoggedInDoctorAsync.fulfilled, (state, action) => {
        state.userInfo = action.payload;
        state.loading = false;
      });
  },
});

//TODO : change orders and address to be independent of users
export const selectUserInfo = (state) => state.user.userInfo;
export const selectUserInfoStatus = (state) => state.user.status;

export default userSlice.reducer;
